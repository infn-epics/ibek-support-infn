# yaml-language-server: $schema=https://github.com/epics-containers/ibek/releases/download/1.5.0/ibek.support.schema.json

module: icpdas
entity_models:
  - name: icp7215
    description: |-
      RTD 7 inputs PT100
    parameters:
      NAME:
        type: id
        description: |-
          Will be the modbus Port Name 

      IP:
        type: str
        description: |-
          IP address of the Modbus
        default: 127.0.0.1 ## localhost

      TCPPORT:
        type: int
        description: |-
          ASYN   MODBUS Port, Default : 502
        default: 502

      P:
        type: str
        description: Prefix

      R:
        type: str
        description: Device Suffix

      POLL_DELAY:
        type: int
        description: |-
          Read  function : Polling delay time in ms for the polling thread
          Write function : a non-zero value means that the Modbus data should be read once
        default: 1000

      TIMEOUT:
        type: int
        description: |-
          MODBUS timeout (ms), Default : 2000
        default: 2000

      WRITEDELAY:
        type: int
        description: |-
          MODBUS write delay ms for Serial RTU, Default : 0
        default: 0
    pre_init:
      - value: |
          # Create Modbus Port & Asyn Port (modbusportname_ASYN)  
          drvAsynIPPortConfigure("{{NAME}}_ASYN", "{{IP}}:{{TCPPORT}}", 0, 0, 0)
          modbusInterposeConfig("{{NAME}}_ASYN",0,{{TIMEOUT}},{{WRITEDELAY}})
          # Read Input Registers temperature
          drvModbusAsynConfigure("{{NAME}}", "{{NAME}}_ASYN", 1, 4, 0, 7, 0, {{POLL_DELAY}}, "ICPDAS7215")
          ## Read Input Registers MIN  histo

          drvModbusAsynConfigure("{{NAME}}_MIN", "{{NAME}}_ASYN", 1, 4, 268, 7, 0, {{POLL_DELAY}}, "ICPDAS7215")
          ## Read Input Registers MAX histo
          drvModbusAsynConfigure("{{NAME}}_MAX", "{{NAME}}_ASYN", 1, 4, 236, 7, 0, {{POLL_DELAY}}, "ICPDAS7215")
          #read once or epics events
          drvModbusAsynConfigure("{{NAME}}_INFO", "{{NAME}}_ASYN", 1, 4, 350, 4, 0, {{POLL_DELAY*10}}, "ICPDAS7215")

    databases:
      - file: icp7215.db
        args:
          P:
          R:
          PORT: '{{NAME}}'
          PORTMIN: '{{NAME}}_MIN'
          PORTMAX: '{{NAME}}_MAX'
          PORTINFO: '{{NAME}}_INFO'
  - name: icp7215temp
    description: |-
      Single Temperature sensor
    parameters:
      icpctrl:
        type: object
        description: |-
          ICP controller reference
      ID:
        type: str
        description: Temperature sensor ID
      DESC:
        type: str
        description: |-
          Readout description
        default: Temperature
      REGOFFSET:
        type: int
        description: |-
          register address/offset
      EGU:
        type: str
        description: |-
          Engineering Units
        default: degC
      HOPR:
        type: int
        description: |-
          High Limit
        default: 0
      LOPR:
        type: int
        description: |-
          Low Limit
        default: 0
      PREC:
        type: int
        description: |-
          Precision
        default: 3
      NELM:
        type: int
        description: |-
          History for average, max and min
        default: 65
      SCAN:
        type: str
        description: |-
          Scan Mode 
        default: I/O Intr
      EGUL:
        type: float
        description: |-
          Engineering Units Low Limit
        default: -100
      EGUF:
        type: float
        description: |-
          Engineering Units High Limit
        default: 100
      ASLO:
        type: float
        description: |-
          Conversion Slope
        default: 0.02319 ## good for PT100 on IPDAS 
      AOFF:
        type: float
        description: |-
          Conversion Offset
        default: 0.0
      HIHI:
        type: float
        description: |-
          Control High High Limit
        default: 100.0
      HIGH:
        type: float
        description: |-
          Control High  Limit
        default: 90.0
      LOLO:
        type: float
        description: |-
          Control Low Low Limit
        default: 0.0
      LOW:
        type: float
        description: |-
          Control Low Limit
        default: 10.0
      LINR:
        type: str
        description: |-
          Enable = LINEAR Disable=NO CONVERSION Linear Conversion
        default: NO CONVERSION


    databases:
      - file: icprtdsensor.template
        args:
          P: '{{icpctrl.P}}'
          R: '{{icpctrl.R}}'
          ID:
          PORT: '{{icpctrl.NAME}}'
          PORTMIN: '{{icpctrl.NAME}}_MIN'
          PORTMAX: '{{icpctrl.NAME}}_MAX'
          REGOFFSET:
          EGU:
          ASLO:
          AOFF:
          HOPR:
          LOPR:
          PREC:
          EGUL:
          EGUF:
          SCAN:
          LOW:
          LOLO:
          HIGH:
          HIHI:
          NELM:


  - name: icp7026
    description: |-
      ICPDAS 7026 6AI 2AO 2DI 2DO
    parameters:
      NAME:
        type: id
        description: |-
          Will be the modbus Port Name 

      IP:
        type: str
        description: |-
          IP address of the Modbus
        default: 127.0.0.1 ## localhost

      TCPPORT:
        type: int
        description: |-
          ASYN   MODBUS Port, Default : 502
        default: 502

      P:
        type: str
        description: Prefix

      R:
        type: str
        description: Device Suffix

      POLL_DELAY:
        type: int
        description: |-
          Read  function : Polling delay time in ms for the polling thread
          Write function : a non-zero value means that the Modbus data should be read once
        default: 1000

      TIMEOUT:
        type: int
        description: |-
          MODBUS timeout (ms), Default : 2000
        default: 2000

      WRITEDELAY:
        type: int
        description: |-
          MODBUS write delay ms for Serial RTU, Default : 0
        default: 0
    pre_init:
      - value: |
          # Create Modbus Port & Asyn Port (modbusportname_ASYN)  
          drvAsynIPPortConfigure("{{NAME}}_ASYN", "{{IP}}:{{TCPPORT}}", 0, 0, 0)
          modbusInterposeConfig("{{NAME}}_ASYN",0,{{TIMEOUT}},{{WRITEDELAY}})
          # https://www.icpdas.com/web/product/download/io_and_unit/ethernet/et7000_et7200/document/manual/pet_et7x00_register_table.pdf
          drvModbusAsynConfigure("{{NAME}}_AI", "{{NAME}}_ASYN", 1,    4, 0, 6, 0, {{POLL_DELAY}}, "ICPDAS7026")
          drvModbusAsynConfigure("{{NAME}}_DICNT", "{{NAME}}_ASYN", 1, 4, 32, 4, 0, {{POLL_DELAY}}, "ICPDAS7026")
          drvModbusAsynConfigure("{{NAME}}_AIMAX", "{{NAME}}_ASYN", 1, 4, 236, 6, 0, {{POLL_DELAY}}, "ICPDAS7026")
          drvModbusAsynConfigure("{{NAME}}_AIMIN", "{{NAME}}_ASYN", 1, 4, 268, 6, 0, {{POLL_DELAY}}, "ICPDAS7026")

          ## 2 write holding registers
          drvModbusAsynConfigure("{{NAME}}_WAO", "{{NAME}}_ASYN", 1,    6, 0, 2, 0, {{POLL_DELAY}}, "ICPDAS7026")
          ## 2 read holding registers
          drvModbusAsynConfigure("{{NAME}}_RAO", "{{NAME}}_ASYN", 1,    3, 0, 2, 0, {{POLL_DELAY}}, "ICPDAS7026")

          ## 2 coil registers
          drvModbusAsynConfigure("{{NAME}}_DO", "{{NAME}}_ASYN", 1,    5, 0, 2, 0, {{POLL_DELAY}}, "ICPDAS7026")

          ## 2 discrete input registers
          drvModbusAsynConfigure("{{NAME}}_DI", "{{NAME}}_ASYN", 1,    2, 0, 2, 0, {{POLL_DELAY}}, "ICPDAS7026")
          #read once or epics events
          drvModbusAsynConfigure("{{NAME}}_INFO", "{{NAME}}_ASYN", 1, 4, 350, 4, 0, {{POLL_DELAY*10}}, "ICPDAS7026")

    databases:
      - file: icp7026.db
        args:
          P:
          R:
          AIPORT: '{{NAME}}_AI'
          WAOPORT: '{{NAME}}_WAO'
          RAOPORT: '{{NAME}}_RAO'
          CNTPORT: '{{NAME}}_DICNT'
          DIPORT: '{{NAME}}_DI'
          DOPORT: '{{NAME}}_DO'
          PORTMIN: '{{NAME}}_AIMIN'
          PORTMAX: '{{NAME}}_AIMAX'
          PORTINFO: '{{NAME}}_INFO'


  - name: icp7267
    description: |-
      Relay 8 outputs
    parameters:
      NAME:
        type: id
        description: |-
          Will be the modbus Port Name 

      IP:
        type: str
        description: |-
          IP address of the Modbus
        default: 127.0.0.1 ## localhost

      TCPPORT:
        type: int
        description: |-
          ASYN   MODBUS Port, Default : 502
        default: 502

      P:
        type: str
        description: Prefix

      R:
        type: str
        description: Device Suffix

      POLL_DELAY:
        type: int
        description: |-
          Read  function : Polling delay time in ms for the polling thread
          Write function : a non-zero value means that the Modbus data should be read once
        default: 1000

      TIMEOUT:
        type: int
        description: |-
          MODBUS timeout (ms), Default : 2000
        default: 2000

      WRITEDELAY:
        type: int
        description: |-
          MODBUS write delay ms for Serial RTU, Default : 0
        default: 0
    pre_init:
      - value: |
          # Create Modbus Port & Asyn Port (modbusportname_ASYN)  
          drvAsynIPPortConfigure("{{NAME}}_ASYN", "{{IP}}:{{TCPPORT}}", 0, 0, 0)
          modbusInterposeConfig("{{NAME}}_ASYN",0,{{TIMEOUT}},{{WRITEDELAY}})
          # Write Relays
          drvModbusAsynConfigure("{{NAME}}_set_port", "{{NAME}}_ASYN", 1,5, 0, 8, 0, {{POLL_DELAY}}, "ICPDAS7267")
          ## Read Relay Status
          drvModbusAsynConfigure("{{NAME}}_get_port", "{{NAME}}_ASYN", 1,1, 0, 8, 0, {{POLL_DELAY}}, "ICPDAS7267")
          #read once or epics events
          drvModbusAsynConfigure("{{NAME}}_INFO", "{{NAME}}_ASYN", 1, 4, 350, 4, 0, {{POLL_DELAY}}, "ICPDAS7267")

    databases:
      - file: icp7267.db
        args:
          P:
          R:
          get_port: '{{NAME}}_get_port'
          set_port: '{{NAME}}_set_port'
          PORT: '{{NAME}}_INFO'
  - name: icp7060
    description: |-
      6 Relay and 6 inputs
    parameters:
      NAME:
        type: id
        description: |-
          Will be the modbus Port Name 

      IP:
        type: str
        description: |-
          IP address of the Modbus
        default: 127.0.0.1 ## localhost

      TCPPORT:
        type: int
        description: |-
          ASYN   MODBUS Port, Default : 502
        default: 502

      P:
        type: str
        description: Prefix

      R:
        type: str
        description: Device Suffix

      POLL_DELAY:
        type: int
        description: |-
          Read  function : Polling delay time in ms for the polling thread
          Write function : a non-zero value means that the Modbus data should be read once
        default: 1000

      TIMEOUT:
        type: int
        description: |-
          MODBUS timeout (ms), Default : 2000
        default: 2000

      WRITEDELAY:
        type: int
        description: |-
          MODBUS write delay ms for Serial RTU, Default : 0
        default: 0
    pre_init:
      - value: |
          # Create Modbus Port & Asyn Port (modbusportname_ASYN)  
          drvAsynIPPortConfigure("{{NAME}}_ASYN", "{{IP}}:{{TCPPORT}}", 0, 0, 0)
          modbusInterposeConfig("{{NAME}}_ASYN",0,{{TIMEOUT}},{{WRITEDELAY}})
          # Write Relays
          drvModbusAsynConfigure("{{NAME}}_set_port", "{{NAME}}_ASYN", 1,5, 0, 6, 0, {{POLL_DELAY}}, "ICPDAS7060")
          ## Read Relay Status
          drvModbusAsynConfigure("{{NAME}}_get_port", "{{NAME}}_ASYN", 1,1, 0, 6, 0, {{POLL_DELAY}}, "ICPDAS7060")
          #inputs
          drvModbusAsynConfigure("{{NAME}}_DI", "{{NAME}}_ASYN",       1, 2,0, 6, 0, {{POLL_DELAY}}, "ICPDAS7060")
          drvModbusAsynConfigure("{{NAME}}_DICNT", "{{NAME}}_ASYN", 1, 4,  16,12, 5, {{POLL_DELAY}}, "ICPDAS7060")
          #read once or epics events
          drvModbusAsynConfigure("{{NAME}}_INFO", "{{NAME}}_ASYN", 1, 4, 150, 4, 0, {{POLL_DELAY}}, "ICPDAS7060")

    databases:
      - file: icp7060.db
        args:
          P:
          R:
          get_port: '{{NAME}}_get_port'
          set_port: '{{NAME}}_set_port'
          DIPORT: '{{NAME}}_DI'
          CNTPORT: '{{NAME}}_DICNT'
          PORT: '{{NAME}}_INFO'

  - name: icp7250
    description: |-
      6 digital output and 12 digital inputs
    parameters:
      NAME:
        type: id
        description: |-
          Will be the modbus Port Name 

      IP:
        type: str
        description: |-
          IP address of the Modbus
        default: 127.0.0.1 ## localhost

      TCPPORT:
        type: int
        description: |-
          ASYN   MODBUS Port, Default : 502
        default: 502

      P:
        type: str
        description: Prefix

      R:
        type: str
        description: Device Suffix

      POLL_DELAY:
        type: int
        description: |-
          Read  function : Polling delay time in ms for the polling thread
          Write function : a non-zero value means that the Modbus data should be read once
        default: 1000
      TIMEOUT:
        type: int
        description: |-
          MODBUS timeout (ms), Default : 2000
        default: 2000

      WRITEDELAY:
        type: int
        description: |-
          MODBUS write delay ms for Serial RTU, Default : 0
        default: 0
    pre_init:
      - value: |
          # Create Modbus Port & Asyn Port (modbusportname_ASYN)  
          drvAsynIPPortConfigure("{{NAME}}_ASYN", "{{IP}}:{{TCPPORT}}", 0, 0, 0)
          modbusInterposeConfig("{{NAME}}_ASYN",0,{{TIMEOUT}},{{WRITEDELAY}})

          #inputs
          drvModbusAsynConfigure("{{NAME}}_DI", "{{NAME}}_ASYN",       1, 2,0, 12, 0, {{POLL_DELAY}}, "ICPDAS7250")
          drvModbusAsynConfigure("{{NAME}}_DICNT", "{{NAME}}_ASYN", 1, 4,  16,24, 5, {{POLL_DELAY}}, "ICPDAS7250")
          drvModbusAsynConfigure("{{NAME}}_DO", "{{NAME}}_ASYN", 1, 5, 0, 6, 0, 1000, "ICPDAS7250")
          #read once or epics events
          drvModbusAsynConfigure("{{NAME}}_INFO", "{{NAME}}_ASYN", 1, 4, 150, 4, 0, {{POLL_DELAY}}, "ICPDAS7250")

    databases:
      - file: icp7250.db
        args:
          P:
          R:
          DOPORT: '{{NAME}}_DO'
          DIPORT: '{{NAME}}_DI'
          CNTPORT: '{{NAME}}_DICNT'
          PORT: '{{NAME}}_INFO'

  - name: icp7226
    description: |-
      ICPDAS 7226 6AI 2AO 2DI 2DO
    parameters:
      NAME:
        type: id
        description: |-
          Will be the modbus Port Name 

      IP:
        type: str
        description: |-
          IP address of the Modbus
        default: 127.0.0.1 ## localhost

      TCPPORT:
        type: int
        description: |-
          ASYN   MODBUS Port, Default : 502
        default: 502

      P:
        type: str
        description: Prefix

      R:
        type: str
        description: Device Suffix

      POLL_DELAY:
        type: int
        description: |-
          Read  function : Polling delay time in ms for the polling thread
          Write function : a non-zero value means that the Modbus data should be read once
        default: 1000

      TIMEOUT:
        type: int
        description: |-
          MODBUS timeout (ms), Default : 2000
        default: 2000

      WRITEDELAY:
        type: int
        description: |-
          MODBUS write delay ms for Serial RTU, Default : 0
        default: 0
    pre_init:
      - value: |
          # Create Modbus Port & Asyn Port (modbusportname_ASYN)  
          drvAsynIPPortConfigure("{{NAME}}_ASYN", "{{IP}}:{{TCPPORT}}", 0, 0, 0)
          modbusInterposeConfig("{{NAME}}_ASYN",0,{{TIMEOUT}},{{WRITEDELAY}})
          # https://www.icpdas.com/web/product/download/io_and_unit/ethernet/et7000_et7200/document/manual/pet_et7x00_register_table.pdf
          drvModbusAsynConfigure("{{NAME}}_AI", "{{NAME}}_ASYN", 1,    4, 0, 6, 0, {{POLL_DELAY}}, "ICPDAS7226")
          drvModbusAsynConfigure("{{NAME}}_DICNT", "{{NAME}}_ASYN", 1, 4, 32, 4, 0, {{POLL_DELAY}}, "ICPDAS7226")
          drvModbusAsynConfigure("{{NAME}}_AIMAX", "{{NAME}}_ASYN", 1, 4, 236, 6, 0, {{POLL_DELAY}}, "ICPDAS7226")
          drvModbusAsynConfigure("{{NAME}}_AIMIN", "{{NAME}}_ASYN", 1, 4, 268, 6, 0, {{POLL_DELAY}}, "ICPDAS7226")

          ## 2 write holding registers
          drvModbusAsynConfigure("{{NAME}}_WAO", "{{NAME}}_ASYN", 1,    6, 0, 2, 0, {{POLL_DELAY}}, "ICPDAS7226")
          ## 2 read holding registers
          drvModbusAsynConfigure("{{NAME}}_RAO", "{{NAME}}_ASYN", 1,    3, 0, 2, 0, {{POLL_DELAY}}, "ICPDAS7226")

          ## 2 coil registers
          drvModbusAsynConfigure("{{NAME}}_DO", "{{NAME}}_ASYN", 1,    5, 0, 2, 0, {{POLL_DELAY}}, "ICPDAS7226")

          ## 2 discrete input registers
          drvModbusAsynConfigure("{{NAME}}_DI", "{{NAME}}_ASYN", 1,    2, 0, 2, 0, {{POLL_DELAY}}, "ICPDAS7226")
          #read once or epics events
          drvModbusAsynConfigure("{{NAME}}_INFO", "{{NAME}}_ASYN", 1, 4, 350, 3, 0, {{POLL_DELAY*10}}, "ICPDAS7226")

    databases:
      - file: icp7226.db
        args:
          P:
          R:
          AIPORT: '{{NAME}}_AI'
          WAOPORT: '{{NAME}}_WAO'
          RAOPORT: '{{NAME}}_RAO'
          CNTPORT: '{{NAME}}_DICNT'
          DIPORT: '{{NAME}}_DI'
          DOPORT: '{{NAME}}_DO'
          PORTMIN: '{{NAME}}_AIMIN'
          PORTMAX: '{{NAME}}_AIMAX'
          PORTINFO: '{{NAME}}_INFO'
